name: Terraform vSphere Provision

on:
  push:
    branches: [ matin ]
  pull_request:

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest

    env:
      TF_VAR_vsphere_user: ${{ secrets.VSPHERE_USER }}
      TF_VAR_vsphere_password: ${{ secrets.VSPHERE_PASSWORD }}
      TF_VAR_vsphere_server: ${{ secrets.VSPHERE_SERVER }}
      TF_VAR_datacenter: ${{ secrets.VSPHERE_DATACENTER }}
      TF_VAR_datastore: ${{ secrets.VSPHERE_DATASTORE }}
      TF_VAR_network: ${{ secrets.VSPHERE_NETWORK }}
      TF_VAR_resource_pool: ${{ secrets.VSPHERE_RESOURCE_POOL }}
      TF_VAR_template_name: ${{ secrets.VSPHERE_TEMPLATE_NAME }}
      TF_VAR_vm_name: "ubuntu-2404-tf-${{ github.run_number }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
          key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Enable Terraform Plugin Cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "${HOME}/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Fix Terraform formatting
        run: terraform fmt -recursive

      - name: Terraform Init
        run: terraform init

      - name: Check Terraform format
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate
        timeout-minutes: 2
      - name: Terraform Plan
        run: terraform plan
        timeout-minutes: 5
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Backup Terraform State
        if: github.ref == 'refs/heads/main'
        run: |
          set -e
          mkdir -p backup
          if [ ! -f terraform.tfstate ]; then
            echo "❌ terraform.tfstate not found!"
            exit 1
          fi
          cp terraform.tfstate backup/terraform.tfstate.backup
          echo "✅ Backup succeeded: terraform.tfstate copied to backup/"
